---
title: "Exploring Data Frames"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 5](https://swcarpentry.github.io/r-novice-gapminder/05-data-structures-part2.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use `cbind()` to add a new column to a data frame.
-   Use `rbind()` to add a new row to a data frame.
-   Remove rows from a data frame.
-   Use `na.omit()` to remove rows from a data frame with NA values.
-   Use `levels()` and `as.character()` to explore and manipulate factors.
-   Use `str()`, `summary()`, `nrow()`, `ncol()`, `dim()`, `colnames()`, `rownames()`, `head()`, and `typeof()` to understand the structure of a data frame.
-   Read in a csv file using `read.csv()`.
-   Understand what `length()` of a data frame represents.
:::

#### Challenge 1

Let's imagine that 1 cat year is equivalent to 7 human years.

1.  Create a vector called `human_age` by multiplying `cats$age` by 7.
2.  Convert `human_age` to a factor.
3.  Convert `human_age` back to a numeric vector using the `as.numeric()` function. Now divide it by 7 to get the original ages back. Explain what happened.

<!-- Challenge 1 answer begin -->

```{r}
# load cats data (make sure you are in the correct working directory)
cats <- read.csv('../04-Data-Structures/data/feline-data_v2.csv')
cats$weight[4] <- 2.35
cats$weight <- as.numeric(cats$weight)
cats$age <- c(2,3,5,1)

# create human_age
human_age <- cats$age * 7

# convert human_age to a factor
human_age <- as.factor(human_age)

# convert human_age back to a numeric vector
as.numeric(human_age)
```

Explanation: When we converted `human_age` to a factor, it stored the categories as integers, running from 1 to 4, and the labels were character representations of the human age. When we converted it back to a numeric vector, it pulled the category identifiers (`1:4`) instead of the labels containing the actual information. To do this properly we would first need to convert the factor into a character vector and then to numeric.

<!-- Challenge 1 answer end -->

#### Challenge 2

You can create a new data frame right from within R with the following syntax:

```{r}
df <- data.frame(id = c("a", "b", "c"),
                 x = 1:3,
                 y = c(TRUE, TRUE, FALSE))
```

Make a data frame that holds the following information for yourself:

-   first name
-   last name
-   lucky number

Then use `rbind` to add an entry for someone you work with. Finally, use `cbind` to add a column with each person's answer to the question, "Is it time for coffee break?"

<!-- Challenge 2 answer begin -->

```{r}
# create people
people <- data.frame(first_name = 'Randy',
                     last_name = 'Johnson',
                     lucky_number = 7)
  
# add a team member
people <- rbind(people,
                data.frame(first_name = 'Donald',
                           last_name = 'Duck',
                           lucky_number = pi))
  
# add coffee break
people <- cbind(people, coffee_break = c(TRUE, FALSE))
  
people
```

<!-- Challenge 2 answer end -->

#### Challenge 3

It's good practice to also check the last few lines of your data and some in the middle. How would you do this?

Searching for ones specifically in the middle isn't too hard, but we could ask for a few lines at random. How would you code this?

<!-- Challenge 3 answer begin -->

```{r}
library(gapminder)
data(gapminder)

# look at the last few lines
tail(gapminder)

# look at some random(ish) rows in the middle
set.seed(234798)
gapminder[sample(1:nrow(gapminder), 6),]
```

<!-- Challenge 3 answer end -->

#### Challenge 4

Go to file -\> new file -\> R script, and write an R script to load in the gapminder dataset. Put it in the `scripts/` directory and add it to version control.

Run the script using the `source` function, using the file path as its argument.

<!-- Challenge 4 answer begin -->

```{r}
source('scripts/load_gapminder.R')
```

<!-- Challenge 4 answer end -->

#### Challenge 5

Read the output of `str(gapminder)` again; this time, use what you've learned about factors, lists and vectors, as well as the output of functions like `colnames` and `dim` to explain what everything that `str` prints out for `gapminder` means.

```{r}
str(gapminder)
```

<!-- Challenge 5 answer begin -->

Firstly, we see that we are working with a data.frame, specifically a tibble, with 1704 rows and 6 columns, or 6 variables:

-   country is a Factor with 142 levels

-   continent is a Factor with 5 levels

-   year is an integer vector of length 1704

-   lifeExp is a numeric vector of length 1704

-   pop is an integer vector of length 1704

-   gspPercap is a numeric vector of length 1704

<!-- Challenge 5 answer end -->
