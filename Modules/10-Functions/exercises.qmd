---
title: "Functions"
format: html
editor: visual
---

The exercises in this document follow along closely with [Lesson 10](https://swcarpentry.github.io/r-novice-gapminder/10-functions.html) of [R for Reproducible Scientific Analysis](https://swcarpentry.github.io/r-novice-gapminder/), provided by the [Software Carpentry](https://software-carpentry.org/) community under the creative commons license, [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/). For more information see [The Carpentries](https://carpentries.org/).

::: callout-tip
## Key Points

-   Use function to define a new function in R.
-   Use parameters to pass values into functions.
-   Use stopifnot() to flexibly check function arguments in R.
-   Load functions into programs using source().
:::

```{r}
#| include: false
library(magrittr)
```

#### Challenge 1

Write a function called `kelvin_to_celsius()` that takes a temperature in Kelvin and returns that temperature in Celsius.

Hint: To convert from Kelvin to Celsius you subtract 273.15

<!-- Challenge 1 answer begin -->

```{r}
# your code goes here
```

<!-- Challenge 1 answer end -->

#### Challenge 2

Convert Fahrenheit to Celsius:

```{r}
#' fahr_to_kelvin
#' Convert degrees fahrenheit to degrees kelvin
#' 
#' @param temp Numeric, temperature in degrees fahrenheight
#' @return Temperature in degrees kelvin
fahr_to_kelvin <- function(temp)
{
  kelvin <- ((temp - 32) * (5 / 9)) + 273.15
  return(kelvin)
}
```

Define the function to convert directly from Fahrenheit to Celsius, by reusing your function, `kelvin_to_celsius()`, and the function above.

<!-- Challenge 2 answer begin -->

```{r}
# your code goes here
```

<!-- Challenge 2 answer end -->

#### Challenge 3

Use defensive programming to ensure that our `fahr_to_celsius()` function throws an error immediately if the argument temp is specified inappropriately.

<!-- Challenge 3 answer begin -->

```{r}
# your code goes here
```

<!-- Challenge 3 answer end -->

#### Challenge 4

The `paste()` function can be used to combine text together, e.g:

```{r}
best_practice <- c("Write", "programs", "for", "people", "not", "computers")
paste(best_practice, collapse=" ")
```

Write a function called `fence()` that takes two vectors as arguments, called `text` and `wrapper`, and prints out the text wrapped with the wrapper. For example, `fence(text=best_practice, wrapper="***")` should give the following result:

```         
"*** Write programs for people not computers ***"
```

<!-- Challenge 4 answer begin -->

```{r}
# Your code goes here
# check to make sure your code works:
fence(text=best_practice, wrapper="***")
```

<!-- Challenge 4 answer end -->
